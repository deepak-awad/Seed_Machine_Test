package com.example.demo.Service;
import com.example.demo.Repository.*;
import com.example.demo.Dao.Category;
import com.example.demo.Repository.categoryRepository;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

@Service
public class categoryService {
	
	@Autowired
	private categoryRepository categoryRepository;
	
	
	public class PageRequestDto {

	    private Integer pageNo = 0;
	    private Integer pageSize = 10;
	    private Sort.Direction sort = Sort.Direction.ASC;

	    private String sortByColumn = "id";

	    public Pageable getPageable(PageRequestDto dto){
	        Integer page = Objects.nonNull(dto.getPageNo()) ? dto.getPageNo() : this.pageNo;
	        Integer size = Objects.nonNull(dto.getPageSize()) ? dto.getPageSize() : this.pageSize;
	        Sort.Direction sort = Objects.nonNull(dto.getSort()) ? dto.getSort() : this.sort;
	        String sortByColumn = Objects.nonNull(dto.getSortByColumn()) ? dto.getSortByColumn() : this.sortByColumn;

	        //        PageRequest request = PageRequest.of(page, size);
	        PageRequest request = PageRequest.of(page, size, sort, sortByColumn);

	        return request;
	    }
	
	
	//Save Details
	public Category createCategory(Category Category)
	{
		return categoryRepository.save(Category);
	}
	
	//get details by id
	public Category getCategoryById(Long id)
	{
		return categoryRepository.findById(id).orElseThrow(()->new RuntimeException("Category Not Found"));
	}
	
	//delete details by id
	public void deleteCategoryById(Long id)
	{
		categoryRepository.deleteById(id);
	}
	
	//update details by id
	public Category updateCategoryById(Long id, Category Category)
	{
		Category c =  getCategoryById(id);
		c.setCategoryName(Category.getCategoryName());
		return categoryRepository.save(c);
	}
	
	
}
